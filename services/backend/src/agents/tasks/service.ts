import { Goal, TaskStatus, TaskPriority } from '@prisma/client'
import { prisma } from '../../prisma'
import type { AIConfig } from '../baseAgent'
import { createTaskGenerationAgent } from '../tasks/agent'
import { historicalAnalysisService } from '../../services/historical-analysis.service'

export async function generateTasksForGoal(goal: Goal, customConfig?: AIConfig) {
  const agent = createTaskGenerationAgent(customConfig)
  const historicalInsights = await historicalAnalysisService.analyzeHistoricalInsights(goal)

  const anonymizedGoal: any = {
    title: goal.title,
    description: goal.description,
    deadline: goal.deadline,
    weeklyTimeCommitment: (goal as any).weeklyTimeCommitment,
    currentExperience: (goal as any).currentExperience,
    availableResources: (goal as any).availableResources,
    startingPoint: (goal as any).startingPoint,
    category: (goal as any).category,
  }

  const taskPrompt = `Please generate a comprehensive task breakdown for the following goal using both goal details and historical data:

**Goal Details (anonymized for privacy):**
- Title: ${anonymizedGoal.title}
- Description: ${anonymizedGoal.description}
- Category: ${anonymizedGoal.category}
- Deadline: ${anonymizedGoal.deadline?.toISOString()}
- Weekly Time Commitment: ${anonymizedGoal.weeklyTimeCommitment || 'not specified'}
- Current Experience: ${anonymizedGoal.currentExperience || 'not specified'}
- Available Resources: ${anonymizedGoal.availableResources || 'not specified'}
- Starting Point: ${anonymizedGoal.startingPoint || 'not specified'}

${(function formatInsights(i:any){
return `**Historical Analysis of Similar Goals:**\n- Similar goals analyzed: ${i.totalSimilarGoals}\n- Historical success rate: ${Math.round(i.successRate*100)}%`})(historicalInsights)}

**Response Format:**
Return ONLY a valid JSON array with no additional text:
[
  {"sequence": 1, "title": "Task Title", "description": "Detailed task description", "deadlineOffsetDays": 1, "priority": "HIGH"}
]`

  const response = await agent.prompt(taskPrompt)
  const clean = response.trim().replace(/```json\n?|\n?```/g, '')
  const tasks = JSON.parse(clean)

  const validTasksData = tasks
    .filter((t: any) => t?.title && typeof t.deadlineOffsetDays === 'number')
    .filter((t: any) => t.title.length <= 100 && (t.description?.length || 0) <= 200)
    .slice(0, 7)
    .sort((a: any, b: any) => (a.sequence || 0) - (b.sequence || 0))

  const now = new Date()
  const goalDeadline = new Date(goal.deadline)
  const totalDaysAvailable = Math.max(1, Math.ceil((goalDeadline.getTime() - now.getTime()) / (1000 * 60 * 60 * 24)))
  const taskInterval = Math.max(1, Math.floor(totalDaysAvailable / (validTasksData.length + 1)))

  const validTasks = validTasksData.map((task: any, index: number) => {
    const daysFromNow = Math.max(1, (index + 1) * taskInterval)
    const taskDeadline = new Date(now.getTime() + daysFromNow * 24 * 60 * 60 * 1000)
    const finalDeadline = taskDeadline > goalDeadline ? goalDeadline : taskDeadline
    return {
      goalId: goal.id,
      title: task.title.trim(),
      description: (task.description || '').trim(),
      deadline: finalDeadline,
      status: TaskStatus.PENDING,
      priority: task.priority || TaskPriority.MEDIUM,
      sequence: task.sequence || index + 1,
      suggestedByAI: true
    }
  })

  if (validTasks.length === 0) throw new Error('No valid tasks generated by AI agent')

  await prisma.task.createMany({ data: validTasks })
  return tasks
} 